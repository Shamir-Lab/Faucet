######## Mink main makefile ###########

CFLAGS+= --std=c++11 -g -O4 -D_FILE_OFFSET_BITS=64 -isystem $(GTEST_DIR)/include # needed to handle files > 2 GB on 32 bits systems

# Prefix for readscan files and util files
READSCAN_PREFIX =./
UTIL_PREFIX =../utils/
TEST_PREFIX =./newTests/

# List of just filenames for utils and readscanAssembler
UTIL_FILES =Cap.cpp DoubleKmer.cpp ReadKmer.cpp Bloom.cpp Kmer.cpp JChecker.cpp JunctionMap.cpp Junction.cpp JuncPairs.cpp ContigJuncList.cpp
READSCAN_FILES= ReadScanner.cpp Contig.cpp ContigNode.cpp ContigGraph.cpp ContigIterator.cpp

# Full path to files
SRC_READSCAN= $(addprefix $(READSCAN_PREFIX),$(READSCAN_FILES))
SRC_UTILS= $(addprefix $(UTIL_PREFIX),$(UTIL_FILES))

SRC_MINK= Mink.cpp

EXEC=mink

#Object files for readscan utils and mink
OBJ_BOTH= $(SRC_UTILS:.cpp=.o) $(SRC_READSCAN:.cpp=.o) 
OBJ_MINK= $(SRC_MINK:.cpp=.o) 

mink: $(OBJ_BOTH) $(OBJ_MINK)
	g++ --std=c++0x $(SRC_READSCAN) $(SRC_UTILS) $(SRC_MINK) -o mink $(CFLAGS)

%.o: %.cpp %.h
	g++ -o $@ -c $< $(CFLAGS)

install:
	cp mink /usr/local/bin
	cp minia /usr/local/bin

depend:
	makedepend $(SRC_READSCAN) $(SRC_UTILS) $(SRC_MINK)

clean:
	\rm -f *.o ../utils/*.o mink $(TESTS) $(TEST_PREFIX)/*.o $(TEST_PREFIX)/*.a gtest_main.a

############# GTEST Targets ######################

# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
# GTEST_DIR = <path_to_googletest>/googletest/googletest

# Where to find user code.
USER_DIR = ..
READSCANNER = .

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g --std=c++0x -Wall -Wextra -pthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS =  ReadscanTest JunctionMapTest
# ContigTest (currently not included)

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

# sample1.o : $(USER_DIR)/sample1.cc $(USER_DIR)/sample1.h $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1.cc

# ContigTest.o : $(OBJ_BOTH) $(TEST_PREFIX)ContigTest.cpp $(GTEST_HEADERS)
# 	g++ $(CFLAGS) -c $(TEST_PREFIX)ContigTest.cpp

ReadscanTest.o : $(OBJ_BOTH) $(TEST_PREFIX)ReadscanTest.cpp $(GTEST_HEADERS)
	g++ $(CFLAGS) -c $(TEST_PREFIX)ReadscanTest.cpp

JunctionMapTest.o : $(OBJ_BOTH) $(TEST_PREFIX)JunctionMapTest.cpp $(GTEST_HEADERS)
	g++ $(CFLAGS) -c $(TEST_PREFIX)JunctionMapTest.cpp


#sample1_unittest.o : $(USER_DIR)/sample1_unittest.cc \
#                     $(USER_DIR)/sample1.h $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1_unittest.cc



AllTests : $(OBJ_BOTH) ReadscanTest.o JunctionMapTest.o gtest_main.a
	g++ $(CFLAGS)  $^ -lpthread -o $@

# sample1_unittest : sample1.o sample1_unittest.o gtest_main.a
# 	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@



##################### MAKE DEPEND OUTPUT #########################

# To regenerate this when dependencies change, run "bash make_depend.sh" from this directory.

# DO NOT DELETE
